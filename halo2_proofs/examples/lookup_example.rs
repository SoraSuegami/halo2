use std::marker::PhantomData;

use halo2_proofs::{
    arithmetic::FieldExt,
    circuit::{AssignedCell, Chip, Layouter, Region, SimpleFloorPlanner},
    plonk::{Advice, Circuit, Column, ConstraintSystem, Error, Instance, TableColumn, Expression},
    poly::Rotation
};

// ANCHOR: instructions
trait XorInstructions<F: FieldExt>: Chip<F> {
    /// Variable representing a boolean vector.
    type Bits;

    /// Loads a boolean vector into the circuit as a private input.
    fn load_private(&self, layouter: impl Layouter<F>, a: Option<F>) -> Result<Self::Bits, Error>;

    /// Returns `c = a ^ b`.
    fn xor(
        &self,
        layouter: impl Layouter<F>,
        a: Self::Bits,
        b: Self::Bits,
    ) -> Result<Self::Bits, Error>;

    /// Exposes a boolean vector as a public input to the circuit.
    fn expose_public(
        &self,
        layouter: impl Layouter<F>,
        bits: Self::Bits,
        row: usize,
    ) -> Result<(), Error>;
}
// ANCHOR_END: instructions


// ANCHOR: chip
/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
struct XorChip<F: FieldExt, const N:usize> {
    config: XorConfig<F,N>,
    _marker: PhantomData<F>,
}
// ANCHOR_END: chip



// ANCHOR: chip-config
/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
/// N denotes the number of bits.
#[derive(Clone, Debug)]
struct XorConfig<F: FieldExt, const N:usize> {
    /// For this chip, we will use two advice columns to implement our instructions.
    /// These are also the columns through which we communicate with other parts of
    /// the circuit.
    advice: [Column<Advice>;2],
    instance: Column<Instance>,

    table_a: TableColumn,
    table_b: TableColumn,
    table_c: TableColumn,

    _f: PhantomData<F>
}




impl<F: FieldExt, const N:usize> XorChip<F,N> {
    fn construct(config: <Self as Chip<F>>::Config) -> Self {
        Self {
            config,
            _marker: PhantomData,
        }
    }

    fn configure(
        meta: &mut ConstraintSystem<F>,
        advice: [Column<Advice>;2],
        instance: Column<Instance>,
    ) -> <Self as Chip<F>>::Config {
        for column in &advice {
            meta.enable_equality(*column);
        }
        meta.enable_equality(instance);

        let q_xor = meta.complex_selector();
        let table_a = meta.lookup_table_column();
        let table_b = meta.lookup_table_column();
        let table_c = meta.lookup_table_column();

        // Define our xor lookup table!
        meta.lookup("xor", |meta| {
            let a = meta.query_advice(advice[0], Rotation::cur());
            let b = meta.query_advice(advice[1], Rotation::cur());
            let c = meta.query_advice(advice[0], Rotation::next());
            let default = Expression::Constant(F::zero());
            let q = meta.query_selector(q_xor);
            let not_q = Expression::Constant(F::one()) - q.clone();
            vec![
                (a*q.clone()+default.clone()*not_q.clone(), table_a),
                (b*q.clone()+default.clone()*not_q.clone(), table_b),
                (c*q+default*not_q, table_c),
            ]
        });

        XorConfig {
            advice,
            instance,
            table_a,
            table_b,
            table_c,
            _f: PhantomData
        }
    }

    pub fn load(
        config: &<Self as Chip<F>>::Config,
        layouter: &mut impl Layouter<F>,
    ) -> Result<<Self as Chip<F>>::Loaded, Error> {
        layouter.assign_table(
            || "xor table",
            |mut table| {
                // We generate the row values lazily (we only need them during keygen).
                let mut rows = <Self as Chip<F>>::Config::generate();

                for index in 0..(1 << 2*N) {
                    let mut row = None;
                    table.assign_cell(
                        || "a",
                        config.table_a,
                        index,
                        || {
                            row = rows.next();
                            row.map(|(a, _, _)| a).ok_or(Error::Synthesis)
                        },
                    )?;
                    table.assign_cell(
                        || "b",
                        config.table_b,
                        index,
                        || row.map(|(_, b, _)| b).ok_or(Error::Synthesis),
                    )?;
                    table.assign_cell(
                        || "c",
                        config.table_c,
                        index,
                        || row.map(|(_, _, c)| c).ok_or(Error::Synthesis),
                    )?;
                }

                Ok(())
            },
        )
    }
}
// ANCHOR_END: chip-config

// ANCHOR: chip-impl
impl<F: FieldExt, const N:usize> Chip<F> for XorChip<F,N> {
    type Config = XorConfig<F,N>;
    type Loaded = ();

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()
    }
}
// ANCHOR_END: chip-impl

impl<F: FieldExt, const N:usize> XorConfig<F, N> {
    fn generate() -> impl Iterator<Item = (F, F, F)> {
        (0..(1 << 2*N)).scan(
            (F::zero(), F::zero(), F::zero()),
            |(_, _, _), i| {
                let a_index = i & ((1<<N)-1);
                let b_index = i >> N;

                let a = F::from(a_index);
                let b = F::from(b_index);
                let c = F::from(a_index^b_index);
                Some((a, b, c))
            },
        )
    }
}


// ANCHOR: instructions-impl
/// A variable representing a boolean vector.
#[derive(Clone)]
struct Bits<F: FieldExt, const N:usize>(AssignedCell<F, F>);

impl<F: FieldExt, const N:usize> XorInstructions<F> for XorChip<F,N> {
    type Bits = Bits<F,N>;

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        value: Option<F>,
    ) -> Result<Self::Bits, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load private",
            |mut region| {
                region
                    .assign_advice(
                        || "private input",
                        config.advice[0],
                        0,
                        || value.ok_or(Error::Synthesis),
                    )
                    .map(Bits)
            },
        )
    }

    fn xor(
        &self,
        mut layouter: impl Layouter<F>,
        a: Self::Bits,
        b: Self::Bits,
    ) -> Result<Self::Bits, Error> {
        let config = self.config();

        layouter.assign_region(
            || "xor",
            |mut region: Region<'_, F>| {
                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                a.0.copy_advice(|| "input_a", &mut region, config.advice[0], 0)?;
                b.0.copy_advice(|| "input_b", &mut region, config.advice[1], 0)?;

                // Now we can assign the xor result, which is to be assigned
                // into the output position.
                let a_v = a.0.value();
                let b_v = b.0.value();
                let value = match (a_v, b_v) {
                    (Some(a), Some(b)) => {
                        let a_u128 = a.get_lower_128();
                        let b_u128 = b.get_lower_128();
                        let c_u128 = a_u128 ^ b_u128;
                        Some(F::from_u128(c_u128))
                    },
                    _ => None
                };

                // Finally, we do the assignment to the output, returning a
                // variable to be used in another part of the circuit.
                region
                    .assign_advice(
                        || "a_input ^ b_input",
                        config.advice[0],
                        1,
                        || value.ok_or(Error::Synthesis),
                    )
                    .map(Bits)
            },
        )
    }

    fn expose_public(
        &self,
        mut layouter: impl Layouter<F>,
        bits: Self::Bits,
        row: usize,
    ) -> Result<(), Error> {
        let config = self.config();
        layouter.constrain_instance(bits.0.cell(), config.instance, row)
    }
}
// ANCHOR_END: instructions-impl



// ANCHOR: circuit
/// The full circuit implementation.
///
/// In this struct we store the private input variables. We use `Option<F>` because
/// they won't have any value during key generation. During proving, if any of these
/// were `None` we would get an error.
#[derive(Default)]
struct MyCircuit<F: FieldExt, const N:usize> {
    a: Option<[bool;N]>,
    b: Option<[bool;N]>,
    _f: PhantomData<F>
}

impl<F: FieldExt, const N:usize> Circuit<F> for MyCircuit<F,N> {
    // Since we are using a single chip for everything, we can just reuse its config.
    type Config = XorConfig<F,N>;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the advice column that XorChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column()];

        // We also need an instance column to store public inputs.
        let instance = meta.instance_column();

        XorChip::configure(meta, advice, instance)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        XorChip::load(&config, &mut layouter)?;
        let xor_chip = XorChip::<F,N>::construct(config);

        let a_f = if let Some(a) = self.a {
            Some(Self::bits2field(a))
        } else {
            None
        };
        let b_f = if let Some(b) = self.b {
            Some(Self::bits2field(b))
        } else {
            None
        };
        // Load our private values into the circuit.
        let a = xor_chip.load_private(layouter.namespace(|| "load a"), a_f)?;
        let b = xor_chip.load_private(layouter.namespace(|| "load b"), b_f)?;
        let c = xor_chip.xor(layouter.namespace(|| "a ^ b"), a, b)?;

        // Expose the result as a public input to the circuit.
        xor_chip.expose_public(layouter.namespace(|| "expose c"), c, 0)?;
        Ok(())
    }
}

impl<F:FieldExt, const N:usize> MyCircuit<F,N> {
    fn bits2field(
        bits: [bool;N]
    ) -> F {
        let mut f = F::zero();
        let mut pow = F::one();
        for (_, b) in bits.iter().enumerate() {
            if *b {
                f += pow;
            }
            pow += pow;
        }
        f
    }
}
// ANCHOR_END: circuit




fn main() {
    use halo2_proofs::{dev::MockProver, pairing::bn256::Fr as Fp};
    use rand::{Rng,thread_rng};
    // ANCHOR: test-circuit
    // The number of rows in our circuit cannot exceed 2^k. Since our example
    // circuit is very small, we can pick a very small value here.
    let k = 17;

    let mut rng = thread_rng();

    // Prepare the private and public inputs to the circuit!
    const N:usize = 8;
    let mut a = [false;N];
    let mut b = [false;N];
    let mut expected_c = [false;N];
    for i in 0..N {
        a[i] = rng.gen();
        b[i] = rng.gen();
        expected_c[i] = a[i] ^ b[i];
    }

    // Instantiate the circuit with the private inputs.
    let circuit = MyCircuit::<Fp,N> {
        a: Some(a),
        b: Some(b),
        _f: PhantomData
    };

    // Arrange the public input. We expose the multiplication result in row 0
    // of the instance column, so we position it there in our public inputs.
    let mut public_inputs = vec![MyCircuit::bits2field(expected_c)];

    // Given the correct public input, our circuit will verify.
    let prover = MockProver::run(k, &circuit, vec![public_inputs.clone()]).unwrap();
    assert_eq!(prover.verify(), Ok(()));

    // If we try some other public input, the proof will fail!
    public_inputs[0] += Fp::one();
    let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
    assert!(prover.verify().is_err());
    // ANCHOR_END: test-circuit

}